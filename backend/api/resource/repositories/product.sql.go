// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const CreateProduct = `-- name: CreateProduct :one
INSERT INTO product (
    id, barcode, name, price, stock, rating, descr, image
) VALUES (
    uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7
)
    RETURNING id, barcode, name, price, stock, rating, descr, image
`

type CreateProductParams struct {
	Barcode string `json:"barcode"`
	Name    string `json:"name"`
	Price   int32  `json:"price"`
	Stock   int32  `json:"stock"`
	Rating  int32  `json:"rating"`
	Descr   string `json:"descr"`
	Image   string `json:"image"`
}

// create
//
//	INSERT INTO product (
//	    id, barcode, name, price, stock, rating, descr, image
//	) VALUES (
//	    uuid_generate_v4(), $1, $2, $3, $4, $5, $6, $7
//	)
//	    RETURNING id, barcode, name, price, stock, rating, descr, image
func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, CreateProduct,
		arg.Barcode,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.Rating,
		arg.Descr,
		arg.Image,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Barcode,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Rating,
		&i.Descr,
		&i.Image,
	)
	return i, err
}

const DeleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product
    WHERE
        id = $1
`

// delete
//
//	DELETE FROM product
//	    WHERE
//	        id = $1
func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteProduct, id)
	return err
}

const ReadByProductId = `-- name: ReadByProductId :one
SELECT id, barcode, name, price, stock, rating, descr, image FROM product
    WHERE
        id = $1
    LIMIT 1
`

// read one
//
//	SELECT id, barcode, name, price, stock, rating, descr, image FROM product
//	    WHERE
//	        id = $1
//	    LIMIT 1
func (q *Queries) ReadByProductId(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, ReadByProductId, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Barcode,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Rating,
		&i.Descr,
		&i.Image,
	)
	return i, err
}

const ReadByProductName = `-- name: ReadByProductName :many
SELECT id, barcode, name, price, stock, rating, descr, image FROM product
    WHERE LOWER(name) LIKE CONCAT('%%',$1::TEXT,'%%')
    ORDER BY name DESC
`

// read many with name like
//
//	SELECT id, barcode, name, price, stock, rating, descr, image FROM product
//	    WHERE LOWER(name) LIKE CONCAT('%%',$1::TEXT,'%%')
//	    ORDER BY name DESC
func (q *Queries) ReadByProductName(ctx context.Context, dollar_1 string) ([]Product, error) {
	rows, err := q.db.Query(ctx, ReadByProductName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Barcode,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Rating,
			&i.Descr,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ReadProduct = `-- name: ReadProduct :many
SELECT id, barcode, name, price, stock, rating, descr, image FROM product
    ORDER BY name
`

// read many
//
//	SELECT id, barcode, name, price, stock, rating, descr, image FROM product
//	    ORDER BY name
func (q *Queries) ReadProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, ReadProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Barcode,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Rating,
			&i.Descr,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProduct = `-- name: UpdateProduct :one
UPDATE product
SET
    barcode = $2,
	name = $3,
	price = $4,
	stock = $5,
    rating = $6,
    descr = $7,
    image = $8

    WHERE
        id = $1
    RETURNING id, barcode, name, price, stock, rating, descr, image
`

type UpdateProductParams struct {
	ID      uuid.UUID `json:"id"`
	Barcode string    `json:"barcode"`
	Name    string    `json:"name"`
	Price   int32     `json:"price"`
	Stock   int32     `json:"stock"`
	Rating  int32     `json:"rating"`
	Descr   string    `json:"descr"`
	Image   string    `json:"image"`
}

// update
//
//	UPDATE product
//	SET
//	    barcode = $2,
//		name = $3,
//		price = $4,
//		stock = $5,
//	    rating = $6,
//	    descr = $7,
//	    image = $8
//
//	    WHERE
//	        id = $1
//	    RETURNING id, barcode, name, price, stock, rating, descr, image
func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, UpdateProduct,
		arg.ID,
		arg.Barcode,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.Rating,
		arg.Descr,
		arg.Image,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Barcode,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Rating,
		&i.Descr,
		&i.Image,
	)
	return i, err
}
