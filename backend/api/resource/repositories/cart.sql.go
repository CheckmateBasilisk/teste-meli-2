// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const CreateCart = `-- name: CreateCart :one
INSERT INTO cart (
    id, product_id, customer_id, amount
) VALUES (
    uuid_generate_v4(), $1, $2, $3
)
    RETURNING id, product_id, customer_id, amount
`

type CreateCartParams struct {
	ProductID  uuid.UUID `json:"product_id"`
	CustomerID uuid.UUID `json:"customer_id"`
	Amount     int32     `json:"amount"`
}

// create
//
//	INSERT INTO cart (
//	    id, product_id, customer_id, amount
//	) VALUES (
//	    uuid_generate_v4(), $1, $2, $3
//	)
//	    RETURNING id, product_id, customer_id, amount
func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, CreateCart, arg.ProductID, arg.CustomerID, arg.Amount)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CustomerID,
		&i.Amount,
	)
	return i, err
}

const DeleteCart = `-- name: DeleteCart :exec
DELETE FROM cart
    WHERE
        id = $1
`

// delete
//
//	DELETE FROM cart
//	    WHERE
//	        id = $1
func (q *Queries) DeleteCart(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteCart, id)
	return err
}

const ReadByCartId = `-- name: ReadByCartId :one
SELECT id, product_id, customer_id, amount FROM cart
    WHERE
        id = $1
    LIMIT 1
`

// read one
//
//	SELECT id, product_id, customer_id, amount FROM cart
//	    WHERE
//	        id = $1
//	    LIMIT 1
func (q *Queries) ReadByCartId(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, ReadByCartId, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CustomerID,
		&i.Amount,
	)
	return i, err
}

const ReadCart = `-- name: ReadCart :many
SELECT id, product_id, customer_id, amount FROM cart
    ORDER BY product_id
`

// read many
//
//	SELECT id, product_id, customer_id, amount FROM cart
//	    ORDER BY product_id
func (q *Queries) ReadCart(ctx context.Context) ([]Cart, error) {
	rows, err := q.db.Query(ctx, ReadCart)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.CustomerID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCart = `-- name: UpdateCart :one
UPDATE cart
SET
    amount = $2

    WHERE
        id = $1
    RETURNING id, product_id, customer_id, amount
`

type UpdateCartParams struct {
	ID     uuid.UUID `json:"id"`
	Amount int32     `json:"amount"`
}

// update
//
//	UPDATE cart
//	SET
//	    amount = $2
//
//	    WHERE
//	        id = $1
//	    RETURNING id, product_id, customer_id, amount
func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, UpdateCart, arg.ID, arg.Amount)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.CustomerID,
		&i.Amount,
	)
	return i, err
}
