// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const CreateCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
    id, login, name
) VALUES (
    uuid_generate_v4(), $1, $2
)
    RETURNING id, login, name
`

type CreateCustomerParams struct {
	Login string `json:"login"`
	Name  string `json:"name"`
}

// create
//
//	INSERT INTO customer (
//	    id, login, name
//	) VALUES (
//	    uuid_generate_v4(), $1, $2
//	)
//	    RETURNING id, login, name
func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, CreateCustomer, arg.Login, arg.Name)
	var i Customer
	err := row.Scan(&i.ID, &i.Login, &i.Name)
	return i, err
}

const DeleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer
    WHERE
        id = $1
`

// delete
//
//	DELETE FROM customer
//	    WHERE
//	        id = $1
func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteCustomer, id)
	return err
}

const ReadByCustomerId = `-- name: ReadByCustomerId :one
SELECT id, login, name FROM customer
    WHERE
        id = $1
    LIMIT 1
`

// read one
//
//	SELECT id, login, name FROM customer
//	    WHERE
//	        id = $1
//	    LIMIT 1
func (q *Queries) ReadByCustomerId(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, ReadByCustomerId, id)
	var i Customer
	err := row.Scan(&i.ID, &i.Login, &i.Name)
	return i, err
}

const ReadCustomer = `-- name: ReadCustomer :many
SELECT id, login, name FROM customer
    ORDER BY name
`

// read many
//
//	SELECT id, login, name FROM customer
//	    ORDER BY name
func (q *Queries) ReadCustomer(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, ReadCustomer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(&i.ID, &i.Login, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCustomer = `-- name: UpdateCustomer :one
UPDATE customer
SET
    login = $2,
	name = $3

    WHERE
        id = $1
    RETURNING id, login, name
`

type UpdateCustomerParams struct {
	ID    uuid.UUID `json:"id"`
	Login string    `json:"login"`
	Name  string    `json:"name"`
}

// update
//
//	UPDATE customer
//	SET
//	    login = $2,
//		name = $3
//
//	    WHERE
//	        id = $1
//	    RETURNING id, login, name
func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, UpdateCustomer, arg.ID, arg.Login, arg.Name)
	var i Customer
	err := row.Scan(&i.ID, &i.Login, &i.Name)
	return i, err
}
